# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  # Habilitando gatilho para execução manual
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build with Maven
        run: mvn clean verify

      #- name: Security Check with OWASP Dependency Check
      #  run: mvn org.owasp:dependency-check-maven:check

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=sonnesen_fiap-product-api \
            -Dsonar.organization=sonnesen \
            -Dsonar.host.url=https://sonarcloud.io
            
      #- name: Upload Test Results
      #  if: always()
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: test-results
      #    path: target/surefire-reports
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE-CRENDENTIALS }}

      - name: ACR login
        run: az acr login --name ${{ secrets.ACR_NAME }}
        
      - name: Build docker image
        run: |
          IMAGE_NAME=${{ secrets.ACR_NAME }}.azurecr.io/fiap-product-api:latest
          docker build -t $IMAGE_NAME .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          
      - name: Push image to ACR
        run: docker push $IMAGE_NAME

      - name: AKS context config
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to AKS
        run: |
          kubectl set image deployment/${{ secrets.APP_NAME }} \
          ${{ secrets.APP_NAME }}=$IMAGE_NAME --record
          kubectl rollout status deployment/${{ secrets.APP_NAME }}          
                                       
      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v3
      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v3
      #- name: Login to DockerHub
      #  uses: docker/login-action@v3
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}
      #- name: Build and push
      #  uses: docker/build-push-action@v6
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    push: true
      #    tags: |
      #      ${{ secrets.DOCKERHUB_USERNAME }}/fiap-product-api:v${{ github.run_number }}
      #      ${{ secrets.DOCKERHUB_USERNAME }}/fiap-product-api:latest
